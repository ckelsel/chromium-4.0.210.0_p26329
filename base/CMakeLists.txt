
include_directories(${COMMON_INCLUDES})

set(SRC_FILES atomicops_internals_x86_gcc.cc)
#set(SRC_FILES ${SRC_FILES} event_recorder.cc)
#set(SRC_FILES ${SRC_FILES} event_recorder_stubs.cc)
#set(SRC_FILES ${SRC_FILES} word_iterator.cc)
set(SRC_FILES ${SRC_FILES} at_exit.cc)
set(SRC_FILES ${SRC_FILES} base_paths.cc)
set(SRC_FILES ${SRC_FILES} base_switches.cc)
set(SRC_FILES ${SRC_FILES} bzip2_error_handler.cc)
set(SRC_FILES ${SRC_FILES} clipboard.cc)
set(SRC_FILES ${SRC_FILES} command_line.cc)
set(SRC_FILES ${SRC_FILES} debug_util.cc)
set(SRC_FILES ${SRC_FILES} directory_watcher_stub.cc)
set(SRC_FILES ${SRC_FILES} dynamic_annotations.cc)
set(SRC_FILES ${SRC_FILES} field_trial.cc)
set(SRC_FILES ${SRC_FILES} file_path.cc)
set(SRC_FILES ${SRC_FILES} file_util.cc)
set(SRC_FILES ${SRC_FILES} histogram.cc)
set(SRC_FILES ${SRC_FILES} json_reader.cc)
set(SRC_FILES ${SRC_FILES} json_writer.cc)
set(SRC_FILES ${SRC_FILES} lazy_instance.cc)
set(SRC_FILES ${SRC_FILES} lock.cc)
set(SRC_FILES ${SRC_FILES} logging.cc)
set(SRC_FILES ${SRC_FILES} md5.cc)
set(SRC_FILES ${SRC_FILES} memory_debug.cc)
set(SRC_FILES ${SRC_FILES} message_loop.cc)
set(SRC_FILES ${SRC_FILES} message_pump_default.cc)
set(SRC_FILES ${SRC_FILES} non_thread_safe.cc)
set(SRC_FILES ${SRC_FILES} path_service.cc)
set(SRC_FILES ${SRC_FILES} perftimer.cc)
set(SRC_FILES ${SRC_FILES} pickle.cc)
set(SRC_FILES ${SRC_FILES} profiler.cc)
set(SRC_FILES ${SRC_FILES} rand_util.cc)
set(SRC_FILES ${SRC_FILES} ref_counted.cc)
set(SRC_FILES ${SRC_FILES} revocable_store.cc)
set(SRC_FILES ${SRC_FILES} scoped_clipboard_writer.cc)
set(SRC_FILES ${SRC_FILES} scoped_temp_dir.cc)
set(SRC_FILES ${SRC_FILES} sha2.cc)
set(SRC_FILES ${SRC_FILES} simple_thread.cc)
set(SRC_FILES ${SRC_FILES} stats_table.cc)
set(SRC_FILES ${SRC_FILES} string_escape.cc)
set(SRC_FILES ${SRC_FILES} string_piece.cc)
set(SRC_FILES ${SRC_FILES} string_util.cc)
set(SRC_FILES ${SRC_FILES} system_monitor.cc)
set(SRC_FILES ${SRC_FILES} thread.cc)
set(SRC_FILES ${SRC_FILES} thread_collision_warner.cc)
set(SRC_FILES ${SRC_FILES} time.cc)
set(SRC_FILES ${SRC_FILES} timer.cc)
set(SRC_FILES ${SRC_FILES} trace_event.cc)
set(SRC_FILES ${SRC_FILES} tracked.cc)
set(SRC_FILES ${SRC_FILES} tracked_objects.cc)
set(SRC_FILES ${SRC_FILES} values.cc)
set(SRC_FILES ${SRC_FILES} version.cc)
set(SRC_FILES ${SRC_FILES} watchdog.cc)
set(SRC_FILES ${SRC_FILES} third_party/nspr/prtime.cc)
set(SRC_FILES ${SRC_FILES} string_util_icu.cc)
set(SRC_FILES ${SRC_FILES} icu_util.cc)
set(SRC_FILES ${SRC_FILES} file_util_icu.cc)
set(SRC_FILES ${SRC_FILES} time_format.cc)

if(LINUX)
    set(SRC_FILES ${SRC_FILES} idle_timer_none.cc)
else()
    set(SRC_FILES ${SRC_FILES} idle_timer.cc)
endif()


if(UNIX)
    set(SRC_FILES ${SRC_FILES} file_util_posix.cc)
    #set(SRC_FILES ${SRC_FILES} hmac_nss.cc)
    #set(SRC_FILES ${SRC_FILES} message_pump_libevent.cc)
    #set(SRC_FILES ${SRC_FILES} nss_init.cc)
    set(SRC_FILES ${SRC_FILES} setproctitle_linux.c)
    #set(SRC_FILES ${SRC_FILES} sys_info_chromeos.cc)
    set(SRC_FILES ${SRC_FILES} time_posix.cc)
    set(SRC_FILES ${SRC_FILES} base_paths_linux.cc)
    set(SRC_FILES ${SRC_FILES} clipboard_linux.cc)
    set(SRC_FILES ${SRC_FILES} condition_variable_posix.cc)
    set(SRC_FILES ${SRC_FILES} data_pack.cc)
    set(SRC_FILES ${SRC_FILES} debug_util_posix.cc)
    set(SRC_FILES ${SRC_FILES} directory_watcher_inotify.cc)
    set(SRC_FILES ${SRC_FILES} file_descriptor_shuffle.cc)
    set(SRC_FILES ${SRC_FILES} file_util_linux.cc)
    set(SRC_FILES ${SRC_FILES} file_version_info_linux.cc)
    set(SRC_FILES ${SRC_FILES} global_descriptors_posix.cc)
    set(SRC_FILES ${SRC_FILES} linux_util.cc)
    set(SRC_FILES ${SRC_FILES} lock_impl_posix.cc)
    set(SRC_FILES ${SRC_FILES} message_pump_glib.cc)
    set(SRC_FILES ${SRC_FILES} mime_util_linux.cc)
    set(SRC_FILES ${SRC_FILES} native_library_linux.cc)
    set(SRC_FILES ${SRC_FILES} platform_file_posix.cc)
    set(SRC_FILES ${SRC_FILES} platform_thread_posix.cc)
    set(SRC_FILES ${SRC_FILES} process_posix.cc)
    set(SRC_FILES ${SRC_FILES} process_util_linux.cc)
    set(SRC_FILES ${SRC_FILES} process_util_posix.cc)
    set(SRC_FILES ${SRC_FILES} rand_util_posix.cc)
    set(SRC_FILES ${SRC_FILES} shared_memory_posix.cc)
    set(SRC_FILES ${SRC_FILES} string16.cc)
    set(SRC_FILES ${SRC_FILES} sys_info_posix.cc)
    set(SRC_FILES ${SRC_FILES} sys_string_conversions_linux.cc)
    set(SRC_FILES ${SRC_FILES} sys_string_conversions_posix.cc)
    set(SRC_FILES ${SRC_FILES} system_monitor_posix.cc)
    set(SRC_FILES ${SRC_FILES} test_file_util_linux.cc)
    set(SRC_FILES ${SRC_FILES} test_file_util_posix.cc)
    set(SRC_FILES ${SRC_FILES} thread_local_posix.cc)
    set(SRC_FILES ${SRC_FILES} thread_local_storage_posix.cc)
    set(SRC_FILES ${SRC_FILES} unix_domain_socket_posix.cc)
    set(SRC_FILES ${SRC_FILES} waitable_event_posix.cc)
    set(SRC_FILES ${SRC_FILES} waitable_event_watcher_posix.cc)
    set(SRC_FILES ${SRC_FILES} worker_pool_linux.cc)
else()
    set(SRC_FILES ${SRC_FILES} base_drag_source.cc)
    set(SRC_FILES ${SRC_FILES} base_drop_target.cc)
    set(SRC_FILES ${SRC_FILES} base_paths_win.cc)
    set(SRC_FILES ${SRC_FILES} crypto/rsa_private_key_win.cc)
    set(SRC_FILES ${SRC_FILES} crypto/signature_creator_win.cc)
    set(SRC_FILES ${SRC_FILES} crypto/signature_verifier_win.cc)
    set(SRC_FILES ${SRC_FILES} clipboard_util.cc)
    set(SRC_FILES ${SRC_FILES} clipboard_win.cc)
    set(SRC_FILES ${SRC_FILES} condition_variable_win.cc)
    set(SRC_FILES ${SRC_FILES} cpu.cc)
    set(SRC_FILES ${SRC_FILES} debug_on_start.cc)
    set(SRC_FILES ${SRC_FILES} debug_util_win.cc)
    set(SRC_FILES ${SRC_FILES} directory_watcher_win.cc)
    set(SRC_FILES ${SRC_FILES} file_util_win.cc)
    set(SRC_FILES ${SRC_FILES} file_version_info.cc)
    set(SRC_FILES ${SRC_FILES} hmac_win.cc)
    set(SRC_FILES ${SRC_FILES} iat_patch.cc)
    set(SRC_FILES ${SRC_FILES} image_util.cc)
    set(SRC_FILES ${SRC_FILES} lock_impl_win.cc)
    set(SRC_FILES ${SRC_FILES} message_pump_win.cc)
    set(SRC_FILES ${SRC_FILES} native_library_win.cc)
    set(SRC_FILES ${SRC_FILES} object_watcher.cc)
IF(NOT CMAKE_CL_64)
    set(SRC_FILES ${SRC_FILES} pe_image.cc)
ENDIF()
    set(SRC_FILES ${SRC_FILES} platform_file_win.cc)
    set(SRC_FILES ${SRC_FILES} platform_thread_win.cc)
    set(SRC_FILES ${SRC_FILES} process_util_win.cc)
    set(SRC_FILES ${SRC_FILES} process_win.cc)
    set(SRC_FILES ${SRC_FILES} rand_util_win.cc)
    set(SRC_FILES ${SRC_FILES} registry.cc)
    set(SRC_FILES ${SRC_FILES} resource_util.cc)
    set(SRC_FILES ${SRC_FILES} shared_memory_win.cc)
    set(SRC_FILES ${SRC_FILES} sys_info_win.cc)
    set(SRC_FILES ${SRC_FILES} sys_string_conversions_win.cc)
    set(SRC_FILES ${SRC_FILES} system_monitor_win.cc)
    set(SRC_FILES ${SRC_FILES} test_file_util_win.cc)
    set(SRC_FILES ${SRC_FILES} thread_local_storage_win.cc)
    set(SRC_FILES ${SRC_FILES} thread_local_win.cc)
    set(SRC_FILES ${SRC_FILES} time_win.cc)
    set(SRC_FILES ${SRC_FILES} waitable_event_watcher_win.cc)
    set(SRC_FILES ${SRC_FILES} waitable_event_win.cc)
    set(SRC_FILES ${SRC_FILES} win_util.cc)
    set(SRC_FILES ${SRC_FILES} wmi_util.cc)
    set(SRC_FILES ${SRC_FILES} worker_pool_win.cc)
#set(SRC_FILES ${SRC_FILES} window_impl.cc)
endif()

if(NOT WIN32)
    set(EXT_LIBS rt)
    SET(EXT_LIBS ${EXT_LIBS} ${GTK_LIBRARIES})
    SET(EXT_LIBS ${EXT_LIBS} ${NSS_LIBRARIES})
    SET(EXT_LIBS ${EXT_LIBS} icuuc)
    SET(EXT_LIBS ${EXT_LIBS} icui18n)
    SET(EXT_LIBS ${EXT_LIBS} icudata)
else()
    set(EXT_LIBS kernel32)
    SET(EXT_LIBS ${EXT_LIBS} Userenv)
    SET(EXT_LIBS ${EXT_LIBS} advapi32)
    SET(EXT_LIBS ${EXT_LIBS} comdlg32)
    SET(EXT_LIBS ${EXT_LIBS} dbghelp)
    SET(EXT_LIBS ${EXT_LIBS} gdi32)
    SET(EXT_LIBS ${EXT_LIBS} odbc32)
    SET(EXT_LIBS ${EXT_LIBS} odbccp32)
    SET(EXT_LIBS ${EXT_LIBS} ole32)
    SET(EXT_LIBS ${EXT_LIBS} oleaut32)
    SET(EXT_LIBS ${EXT_LIBS} psapi)
    SET(EXT_LIBS ${EXT_LIBS} shell32)
    SET(EXT_LIBS ${EXT_LIBS} user32)
    SET(EXT_LIBS ${EXT_LIBS} uuid)
    SET(EXT_LIBS ${EXT_LIBS} version)
    SET(EXT_LIBS ${EXT_LIBS} winspool)
    SET(EXT_LIBS ${EXT_LIBS} wtsapi32)
endif()

if (WIN32)
    set(CMAKE_EXE_LINKER_FLAGS   /subsystem:windows)
    add_executable(debug_message debug_message.cc)
    target_link_libraries(debug_message ${EXT_LIBS})
endif()

set(THIRD_PARTY_SRC_FILES third_party/dmg_fp/g_fmt.cc)
set(THIRD_PARTY_SRC_FILES ${THIRD_PARTY_SRC_FILES} third_party/dmg_fp/dtoa.cc)

add_library(${PROJECT_LIB_NAME} ${SRC_FILES} ${THIRD_PARTY_SRC_FILES})
target_link_libraries(${PROJECT_LIB_NAME} ${EXT_LIBS})

