
include_directories(${COMMON_INCLUDES})

include_directories(${PROJECT_SOURCE_DIR}/sdch/open-vcdiff/src)
include_directories(${PROJECT_SOURCE_DIR}/third_party/icu/public/common)
include_directories(${PROJECT_SOURCE_DIR}/third_party/icu/public/i18n)

add_definitions(/UENABLE_GRIT)
if (WIN32)
    add_definitions(/D_WINSOCKAPI_)
endif(WIN32)

set(SRC_FILES base/address_list.cc)
set(SRC_FILES ${SRC_FILES} base/base64.cc)
set(SRC_FILES ${SRC_FILES} base/bzip2_filter.cc)
set(SRC_FILES ${SRC_FILES} base/cert_status_flags.cc)
set(SRC_FILES ${SRC_FILES} base/cert_verifier.cc)
set(SRC_FILES ${SRC_FILES} base/connection_type_histograms.cc)
set(SRC_FILES ${SRC_FILES} base/cookie_monster.cc)
set(SRC_FILES ${SRC_FILES} base/cookie_policy.cc)
set(SRC_FILES ${SRC_FILES} base/data_url.cc)
set(SRC_FILES ${SRC_FILES} base/directory_lister.cc)
set(SRC_FILES ${SRC_FILES} base/dns_util.cc)
set(SRC_FILES ${SRC_FILES} base/effective_tld_names.cc)
set(SRC_FILES ${SRC_FILES} base/effective_tld_names.dat)
set(SRC_FILES ${SRC_FILES} base/escape.cc)
set(SRC_FILES ${SRC_FILES} base/ev_root_ca_metadata.cc)
set(SRC_FILES ${SRC_FILES} base/filter.cc)
set(SRC_FILES ${SRC_FILES} base/gzip_filter.cc)
set(SRC_FILES ${SRC_FILES} base/gzip_header.cc)
set(SRC_FILES ${SRC_FILES} base/host_cache.cc)
set(SRC_FILES ${SRC_FILES} base/host_resolver.cc)
set(SRC_FILES ${SRC_FILES} base/host_resolver_impl.cc)
set(SRC_FILES ${SRC_FILES} base/host_resolver_proc.cc)
set(SRC_FILES ${SRC_FILES} base/io_buffer.cc)
set(SRC_FILES ${SRC_FILES} base/listen_socket.cc)
set(SRC_FILES ${SRC_FILES} base/load_log.cc)
set(SRC_FILES ${SRC_FILES} base/load_log_util.cc)
set(SRC_FILES ${SRC_FILES} base/mime_sniffer.cc)
set(SRC_FILES ${SRC_FILES} base/mime_util.cc)
set(SRC_FILES ${SRC_FILES} base/mock_host_resolver.cc)
set(SRC_FILES ${SRC_FILES} base/net_errors.cc)
set(SRC_FILES ${SRC_FILES} base/net_module.cc)
set(SRC_FILES ${SRC_FILES} base/net_util.cc)
set(SRC_FILES ${SRC_FILES} base/registry_controlled_domain.cc)
set(SRC_FILES ${SRC_FILES} base/sdch_filter.cc)
set(SRC_FILES ${SRC_FILES} base/sdch_manager.cc)
set(SRC_FILES ${SRC_FILES} base/ssl_client_auth_cache.cc)
set(SRC_FILES ${SRC_FILES} base/ssl_config_service.cc)
set(SRC_FILES ${SRC_FILES} base/strict_transport_security_state.cc)
set(SRC_FILES ${SRC_FILES} base/telnet_server.cc)
set(SRC_FILES ${SRC_FILES} base/upload_data.cc)
set(SRC_FILES ${SRC_FILES} base/upload_data_stream.cc)
set(SRC_FILES ${SRC_FILES} base/x509_certificate.cc)
set(SRC_FILES ${SRC_FILES} disk_cache/addr.cc)
set(SRC_FILES ${SRC_FILES} disk_cache/backend_impl.cc)
set(SRC_FILES ${SRC_FILES} disk_cache/bitmap.cc)
set(SRC_FILES ${SRC_FILES} disk_cache/block_files.cc)
set(SRC_FILES ${SRC_FILES} disk_cache/entry_impl.cc)
set(SRC_FILES ${SRC_FILES} disk_cache/eviction.cc)
set(SRC_FILES ${SRC_FILES} disk_cache/file_lock.cc)
set(SRC_FILES ${SRC_FILES} disk_cache/hash.cc)
set(SRC_FILES ${SRC_FILES} disk_cache/mem_backend_impl.cc)
set(SRC_FILES ${SRC_FILES} disk_cache/mem_entry_impl.cc)
set(SRC_FILES ${SRC_FILES} disk_cache/mem_rankings.cc)
set(SRC_FILES ${SRC_FILES} disk_cache/rankings.cc)
set(SRC_FILES ${SRC_FILES} disk_cache/sparse_control.cc)
set(SRC_FILES ${SRC_FILES} disk_cache/stats.cc)
set(SRC_FILES ${SRC_FILES} disk_cache/stats_histogram.cc)
set(SRC_FILES ${SRC_FILES} disk_cache/trace.cc)
set(SRC_FILES ${SRC_FILES} ftp/ftp_auth_cache.cc)
set(SRC_FILES ${SRC_FILES} ftp/ftp_ctrl_response_buffer.cc)
set(SRC_FILES ${SRC_FILES} ftp/ftp_network_layer.cc)
set(SRC_FILES ${SRC_FILES} ftp/ftp_network_transaction.cc)
set(SRC_FILES ${SRC_FILES} ftp/ftp_server_type_histograms.cc)
set(SRC_FILES ${SRC_FILES} http/des.cc)
set(SRC_FILES ${SRC_FILES} http/http_auth.cc)
set(SRC_FILES ${SRC_FILES} http/http_auth_cache.cc)
set(SRC_FILES ${SRC_FILES} http/http_auth_handler.cc)
set(SRC_FILES ${SRC_FILES} http/http_auth_handler_basic.cc)
set(SRC_FILES ${SRC_FILES} http/http_auth_handler_digest.cc)
set(SRC_FILES ${SRC_FILES} http/http_auth_handler_ntlm.cc)
set(SRC_FILES ${SRC_FILES} http/http_byte_range.cc)
set(SRC_FILES ${SRC_FILES} http/http_cache.cc)
set(SRC_FILES ${SRC_FILES} http/http_chunked_decoder.cc)
set(SRC_FILES ${SRC_FILES} http/http_network_layer.cc)
set(SRC_FILES ${SRC_FILES} http/http_network_session.cc)
set(SRC_FILES ${SRC_FILES} http/http_network_transaction.cc)
set(SRC_FILES ${SRC_FILES} http/http_response_headers.cc)
set(SRC_FILES ${SRC_FILES} http/http_response_info.cc)
set(SRC_FILES ${SRC_FILES} http/http_util.cc)
set(SRC_FILES ${SRC_FILES} http/http_vary_data.cc)
set(SRC_FILES ${SRC_FILES} http/md4.cc)
set(SRC_FILES ${SRC_FILES} http/partial_data.cc)
set(SRC_FILES ${SRC_FILES} proxy/init_proxy_resolver.cc)
set(SRC_FILES ${SRC_FILES} proxy/proxy_config.cc)
set(SRC_FILES ${SRC_FILES} proxy/proxy_info.cc)
set(SRC_FILES ${SRC_FILES} proxy/proxy_list.cc)
set(SRC_FILES ${SRC_FILES} proxy/proxy_resolver_js_bindings.cc)
#set(SRC_FILES ${SRC_FILES} proxy/proxy_resolver_v8.cc)
set(SRC_FILES ${SRC_FILES} proxy/proxy_script_fetcher.cc)
set(SRC_FILES ${SRC_FILES} proxy/proxy_server.cc)
set(SRC_FILES ${SRC_FILES} proxy/proxy_service.cc)
set(SRC_FILES ${SRC_FILES} proxy/single_threaded_proxy_resolver.cc)
set(SRC_FILES ${SRC_FILES} socket/client_socket.cc)
set(SRC_FILES ${SRC_FILES} socket/client_socket_factory.cc)
set(SRC_FILES ${SRC_FILES} socket/client_socket_handle.cc)
set(SRC_FILES ${SRC_FILES} socket/client_socket_pool_base.cc)
set(SRC_FILES ${SRC_FILES} socket/socks5_client_socket.cc)
set(SRC_FILES ${SRC_FILES} socket/socks_client_socket.cc)
set(SRC_FILES ${SRC_FILES} socket/ssl_test_util.cc)
set(SRC_FILES ${SRC_FILES} socket/tcp_client_socket_pool.cc)
set(SRC_FILES ${SRC_FILES} third_party/parseftp/ParseFTPList.cpp)
set(SRC_FILES ${SRC_FILES} url_request/url_request.cc)
set(SRC_FILES ${SRC_FILES} url_request/url_request_about_job.cc)
set(SRC_FILES ${SRC_FILES} url_request/url_request_error_job.cc)
set(SRC_FILES ${SRC_FILES} url_request/url_request_file_dir_job.cc)
set(SRC_FILES ${SRC_FILES} url_request/url_request_file_job.cc)
set(SRC_FILES ${SRC_FILES} url_request/url_request_filter.cc)
set(SRC_FILES ${SRC_FILES} url_request/url_request_ftp_job.cc)
set(SRC_FILES ${SRC_FILES} url_request/url_request_http_job.cc)
set(SRC_FILES ${SRC_FILES} url_request/url_request_inet_job.cc)
set(SRC_FILES ${SRC_FILES} url_request/url_request_job.cc)
set(SRC_FILES ${SRC_FILES} url_request/url_request_job_manager.cc)
set(SRC_FILES ${SRC_FILES} url_request/url_request_job_metrics.cc)
set(SRC_FILES ${SRC_FILES} url_request/url_request_job_tracker.cc)
set(SRC_FILES ${SRC_FILES} url_request/url_request_new_ftp_job.cc)
set(SRC_FILES ${SRC_FILES} url_request/url_request_redirect_job.cc)
set(SRC_FILES ${SRC_FILES} url_request/url_request_simple_job.cc)
set(SRC_FILES ${SRC_FILES} url_request/url_request_test_job.cc)
set(SRC_FILES ${SRC_FILES} url_request/url_request_view_net_internals_job.cc)
set(SRC_FILES ${SRC_FILES} url_request/view_cache_helper.cc)

if(UNIX)
    set(SRC_FILES ${SRC_FILES} http/http_auth_handler_ntlm_portable.cc)
    set(SRC_FILES ${SRC_FILES} socket/tcp_client_socket_libevent.cc)
    set(SRC_FILES ${SRC_FILES} base/file_stream_posix.cc)
    set(SRC_FILES ${SRC_FILES} base/net_util_posix.cc)
    set(SRC_FILES ${SRC_FILES} disk_cache/cache_util_posix.cc)
    set(SRC_FILES ${SRC_FILES} disk_cache/file_posix.cc)
    set(SRC_FILES ${SRC_FILES} disk_cache/mapped_file_posix.cc)

    set(SRC_FILES ${SRC_FILES} base/platform_mime_util_linux.cc)
    set(SRC_FILES ${SRC_FILES} proxy/proxy_config_service_linux.cc)
else()
    set(SRC_FILES ${SRC_FILES} base/file_stream_win.cc)
    set(SRC_FILES ${SRC_FILES} base/net_util_win.cc)
    set(SRC_FILES ${SRC_FILES} base/platform_mime_util_win.cc)
    set(SRC_FILES ${SRC_FILES} base/ssl_config_service_win.cc)
    set(SRC_FILES ${SRC_FILES} base/wininet_util.cc)
    set(SRC_FILES ${SRC_FILES} base/winsock_init.cc)
    #set(SRC_FILES ${SRC_FILES} base/x509_certificate_win.cc)
    set(SRC_FILES ${SRC_FILES} disk_cache/cache_util_win.cc)
    set(SRC_FILES ${SRC_FILES} disk_cache/file_win.cc)
    set(SRC_FILES ${SRC_FILES} disk_cache/mapped_file_win.cc)
    set(SRC_FILES ${SRC_FILES} http/http_auth_handler_ntlm_win.cc)
    set(SRC_FILES ${SRC_FILES} proxy/proxy_config_service_win.cc)
    set(SRC_FILES ${SRC_FILES} proxy/proxy_resolver_winhttp.cc)
    set(SRC_FILES ${SRC_FILES} socket/ssl_client_socket_win.cc)
    set(SRC_FILES ${SRC_FILES} socket/tcp_client_socket_win.cc)

    #set(SRC_FILES ${SRC_FILES} base/nss_memio.c)
    #set(SRC_FILES ${SRC_FILES} base/x509_certificate_nss.cc)
    #set(SRC_FILES ${SRC_FILES} ocsp/nss_ocsp.cc)
    #set(SRC_FILES ${SRC_FILES} socket/ssl_client_socket_nss.cc)

endif()


add_library(${PROJECT_NET_LIB_NAME} ${SRC_FILES})
target_link_libraries(${PROJECT_NET_LIB_NAME} ${EXT_LIBS})
